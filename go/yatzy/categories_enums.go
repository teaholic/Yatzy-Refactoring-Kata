// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums yatzy.go

package yatzy

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type Category struct {
	category
}

type categoriesContainer struct {
	UNKNOWN         Category
	CHANCE          Category
	YATZY           Category
	ONES            Category
	TWOS            Category
	THREES          Category
	FOURS           Category
	FIVES           Category
	SIXES           Category
	PAIR            Category
	THREE_OF_A_KIND Category
	FOUR_OF_A_KIND  Category
	SMALL_STRAIGHT  Category
	LARGE_STRAIGHT  Category
	TWO_PAIRS       Category
	FULL_HOUSE      Category
}

var Categories = categoriesContainer{
	UNKNOWN: Category{
		category: unknown,
	},
	CHANCE: Category{
		category: chance,
	},
	YATZY: Category{
		category: yatzy,
	},
	ONES: Category{
		category: ones,
	},
	TWOS: Category{
		category: twos,
	},
	THREES: Category{
		category: threes,
	},
	FOURS: Category{
		category: fours,
	},
	FIVES: Category{
		category: fives,
	},
	SIXES: Category{
		category: sixes,
	},
	PAIR: Category{
		category: pair,
	},
	THREE_OF_A_KIND: Category{
		category: three_of_a_kind,
	},
	FOUR_OF_A_KIND: Category{
		category: four_of_a_kind,
	},
	SMALL_STRAIGHT: Category{
		category: small_straight,
	},
	LARGE_STRAIGHT: Category{
		category: large_straight,
	},
	TWO_PAIRS: Category{
		category: two_pairs,
	},
	FULL_HOUSE: Category{
		category: full_house,
	},
}

func (c categoriesContainer) All() []Category {
	return []Category{
		c.UNKNOWN,
		c.CHANCE,
		c.YATZY,
		c.ONES,
		c.TWOS,
		c.THREES,
		c.FOURS,
		c.FIVES,
		c.SIXES,
		c.PAIR,
		c.THREE_OF_A_KIND,
		c.FOUR_OF_A_KIND,
		c.SMALL_STRAIGHT,
		c.LARGE_STRAIGHT,
		c.TWO_PAIRS,
		c.FULL_HOUSE,
	}
}

var invalidCategory = Category{}

func ParseCategory(a any) (Category, error) {
	res := invalidCategory
	switch v := a.(type) {
	case Category:
		return v, nil
	case []byte:
		res = stringToCategory(string(v))
	case string:
		res = stringToCategory(v)
	case fmt.Stringer:
		res = stringToCategory(v.String())
	case int:
		res = intToCategory(v)
	case int64:
		res = intToCategory(int(v))
	case int32:
		res = intToCategory(int(v))
	}
	return res, nil
}

func stringToCategory(s string) Category {
	switch s {
	case "unknown":
		return Categories.UNKNOWN
	case "chance":
		return Categories.CHANCE
	case "yatzy":
		return Categories.YATZY
	case "ones":
		return Categories.ONES
	case "twos":
		return Categories.TWOS
	case "threes":
		return Categories.THREES
	case "fours":
		return Categories.FOURS
	case "fives":
		return Categories.FIVES
	case "sixes":
		return Categories.SIXES
	case "pair":
		return Categories.PAIR
	case "three_of_a_kind":
		return Categories.THREE_OF_A_KIND
	case "four_of_a_kind":
		return Categories.FOUR_OF_A_KIND
	case "small_straight":
		return Categories.SMALL_STRAIGHT
	case "large_straight":
		return Categories.LARGE_STRAIGHT
	case "two_pairs":
		return Categories.TWO_PAIRS
	case "full_house":
		return Categories.FULL_HOUSE
	}
	return invalidCategory
}

func intToCategory(i int) Category {
	if i < 0 || i >= len(Categories.All()) {
		return invalidCategory
	}
	return Categories.All()[i]
}

func ExhaustiveCategorys(f func(Category)) {
	for _, p := range Categories.All() {
		f(p)
	}
}

var validCategories = map[Category]bool{
	Categories.UNKNOWN:         true,
	Categories.CHANCE:          true,
	Categories.YATZY:           true,
	Categories.ONES:            true,
	Categories.TWOS:            true,
	Categories.THREES:          true,
	Categories.FOURS:           true,
	Categories.FIVES:           true,
	Categories.SIXES:           true,
	Categories.PAIR:            true,
	Categories.THREE_OF_A_KIND: true,
	Categories.FOUR_OF_A_KIND:  true,
	Categories.SMALL_STRAIGHT:  true,
	Categories.LARGE_STRAIGHT:  true,
	Categories.TWO_PAIRS:       true,
	Categories.FULL_HOUSE:      true,
}

func (p Category) IsValid() bool {
	return validCategories[p]
}

func (p Category) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Category) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseCategory(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *Category) Scan(value any) error {
	newp, err := ParseCategory(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p Category) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[chance-1]
	_ = x[yatzy-2]
	_ = x[ones-3]
	_ = x[twos-4]
	_ = x[threes-5]
	_ = x[fours-6]
	_ = x[fives-7]
	_ = x[sixes-8]
	_ = x[pair-9]
	_ = x[three_of_a_kind-10]
	_ = x[four_of_a_kind-11]
	_ = x[small_straight-12]
	_ = x[large_straight-13]
	_ = x[two_pairs-14]
	_ = x[full_house-15]
}

const _categories_name = "unknownchanceyatzyonestwosthreesfoursfivessixespairthree_of_a_kindfour_of_a_kindsmall_straightlarge_straighttwo_pairsfull_house"

var _categories_index = [...]uint16{0, 7, 13, 18, 22, 26, 32, 37, 42, 47, 51, 66, 80, 94, 108, 117, 127}

func (i category) String() string {
	if i < 0 || i >= category(len(_categories_index)-1) {
		return "categories(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _categories_name[_categories_index[i]:_categories_index[i+1]]
}
